# Makefile for vacall

#### Start of system configuration section. ####

HOST = @host@
CPU = @HOST_CPU_C_ABI@
OS = @host_os@

# Directories used by "make":
srcdir = @srcdir@

# Directories used by "make install":
prefix = @prefix@
local_prefix = /usr/local
exec_prefix = @exec_prefix@
libdir = @libdir@
includedir = @includedir@
mandir = @mandir@
datadir = @datadir@
datarootdir = @datarootdir@
htmldir = $(datadir)/html

# Programs used by "make":
CC = @CC@
CFLAGS = @CFLAGS@
CPPFLAGS = @CPPFLAGS@
CPP = @CPP@
INCLUDES = -I. -I$(srcdir) -I$(srcdir)/../../vacall -I../.. -I$(srcdir)/../..
INCLUDES_WITH_GNULIB = $(INCLUDES) -I../../gnulib-lib -I$(srcdir)/../../gnulib-lib
ASPFLAGS = `if test @AS_UNDERSCORE@ = true; then echo '-DASM_UNDERSCORE'; fi`
LDFLAGS = @LDFLAGS@
LIBTOOL = @LIBTOOL@
LIBTOOL_COMPILE = $(LIBTOOL) --mode=compile
LIBTOOL_LINK = $(LIBTOOL) --mode=link
LIBTOOL_INSTALL = $(LIBTOOL) --mode=install
LIBTOOL_UNINSTALL = $(LIBTOOL) --mode=uninstall
AR = @AR@
AR_FLAGS = rc
RANLIB = @RANLIB@
MV = mv
LN = @LN@
RM = rm -f
@SET_MAKE@

# Programs used by "make install":
INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA = @INSTALL_DATA@

#### End of system configuration section. ####

SHELL = /bin/sh

# Needed by $(LIBTOOL).
top_builddir = ../..

OBJECTS = vacall.lo vacall-libapi.lo vacall-structcpy.lo

all : $(OBJECTS) libvacall.la

vacall.lo : vacall-$(CPU).lo
	$(RM) vacall.lo vacall.@OBJEXT@
	$(LN) vacall-$(CPU).lo vacall.lo
	if test -f vacall-$(CPU).@OBJEXT@; then $(LN) vacall-$(CPU).@OBJEXT@ vacall.@OBJEXT@; fi

@IFNOT_MSVC@vacall-i386.lo : vacall-i386.s
@IFNOT_MSVC@	$(LIBTOOL_COMPILE) $(CC) @GCC_X_NONE@ -c vacall-i386.s

@IFNOT_MSVC@vacall-i386.s : $(srcdir)/vacall-i386-macro.S
@IFNOT_MSVC@	$(CPP) $(ASPFLAGS) -I$(srcdir) -I$(srcdir)/../../common - < $(srcdir)/vacall-i386-macro.S | grep -v '^ *#line' | grep -v '^#' | sed -e 's,% ,%,g' -e 's,\. ,.,g' -e 's,@ ,@,g' -e 's,//.*$$,,' -e 's/##//g' > vacall-i386.s

@IF_MSVC@vacall-i386.lo : $(srcdir)/vacall-i386-msvc.c
@IF_MSVC@	$(LIBTOOL_COMPILE) $(CC) $(INCLUDES) -I$(srcdir)/../../common $(CPPFLAGS) $(CFLAGS) -c $(srcdir)/vacall-i386-msvc.c -o vacall-i386.lo

vacall-sparc.lo : vacall-sparc.s
	$(LIBTOOL_COMPILE) $(CC) @GCC_X_NONE@ -c vacall-sparc.s

vacall-sparc.s : $(srcdir)/vacall-sparc-macro.S
	$(CPP) $(ASPFLAGS) -I$(srcdir)/../../common - < $(srcdir)/vacall-sparc-macro.S | grep -v '^ *#line' | grep -v '^#' | sed -e 's,% ,%,g' -e 's,\. ,.,g' -e 's,//.*$$,,' -e 's,\$$,#,g' -e 's,# ,#,g' > vacall-sparc.s

vacall-sparc64.lo : vacall-sparc64.s
	$(LIBTOOL_COMPILE) $(CC) @GCC_X_NONE@ -c vacall-sparc64.s

vacall-sparc64.s : $(srcdir)/vacall-sparc64-macro.S
	$(CPP) $(ASPFLAGS) -I$(srcdir)/../../common - < $(srcdir)/vacall-sparc64-macro.S | grep -v '^ *#line' | grep -v '^#' | sed -e 's,% ,%,g' -e 's,\. ,.,g' -e 's,//.*$$,,' -e 's,\$$,#,g' -e 's,# ,#,g' > vacall-sparc64.s

vacall-m68k.lo : vacall-m68k.s
	$(LIBTOOL_COMPILE) $(CC) @GCC_X_NONE@ -c vacall-m68k.s

vacall-m68k.s : $(srcdir)/vacall-m68k.mit.S $(srcdir)/vacall-m68k.motorola.S
	$(CPP) $(ASPFLAGS) -I$(srcdir) -I$(srcdir)/../../common $(srcdir)/vacall-m68k.motorola.S | grep -v '^ *#line' | grep -v '^#' | sed -e 's,% ,%,g' -e 's,//.*$$,,' | if test @AS_UNDERSCORE@ = true; then sed -e 's/\$$//g'; else sed -e 's/\$$/%/g'; fi > vacall-m68k.s

vacall-mips.lo : vacall-mips.s
	$(LIBTOOL_COMPILE) $(CC) @GCC_X_NONE@ -c vacall-mips.s

vacall-mips.s : $(srcdir)/vacall-mips@ENDIANNESS@-macro.S
	$(CPP) $(ASPFLAGS) -I$(srcdir) -I$(srcdir)/../../common $(srcdir)/vacall-mips@ENDIANNESS@-macro.S | grep -v '^ *#line' | grep -v '^#' | sed -e 's,% ,%,g' -e 's,//.*$$,,' > vacall-mips.s

vacall-mipsn32.lo : vacall-mipsn32.s
	$(LIBTOOL_COMPILE) $(CC) @GCC_X_NONE@ -c vacall-mipsn32.s

vacall-mipsn32.s : $(srcdir)/vacall-mipsn32@ENDIANNESS@-macro.S
	$(CPP) $(ASPFLAGS) -I$(srcdir) -I$(srcdir)/../../common $(srcdir)/vacall-mipsn32@ENDIANNESS@-macro.S | grep -v '^ *#line' | grep -v '^#' | sed -e 's,% ,%,g' -e 's,//.*$$,,' > vacall-mipsn32.s

vacall-mips64.lo : vacall-mips64.s
	$(LIBTOOL_COMPILE) $(CC) @GCC_X_NONE@ -c vacall-mips64.s

vacall-mips64.s : $(srcdir)/vacall-mips64@ENDIANNESS@-macro.S
	$(CPP) $(ASPFLAGS) -I$(srcdir) -I$(srcdir)/../../common $(srcdir)/vacall-mips64@ENDIANNESS@-macro.S | grep -v '^ *#line' | grep -v '^#' | sed -e 's,% ,%,g' -e 's,//.*$$,,' > vacall-mips64.s

vacall-alpha.lo : vacall-alpha.s
	$(LIBTOOL_COMPILE) $(CC) @GCC_X_NONE@ -c vacall-alpha.s

vacall-alpha.s : $(srcdir)/vacall-alpha-macro.S
	$(CPP) $(ASPFLAGS) -I$(srcdir) -I$(srcdir)/../../common $(srcdir)/vacall-alpha-macro.S | grep -v '^ *#line' | grep -v '^#' | sed -e 's,% ,%,g' -e 's,//.*$$,,' > vacall-alpha.s

vacall-hppa.lo : vacall-hppa.s
	$(LIBTOOL_COMPILE) $(CC) @GCC_X_NONE@ -c vacall-hppa.s

vacall-hppa.s : $(srcdir)/vacall-hppa-macro.S
	$(CPP) $(ASPFLAGS) -I$(srcdir)/../../common $(srcdir)/vacall-hppa-macro.S | grep -v '^ *#line' | grep -v '^#' | sed -e "s,!,',g" > vacall-hppa.s

vacall-hppa64.lo : vacall-hppa64.s
	$(LIBTOOL_COMPILE) $(CC) @GCC_X_NONE@ -c vacall-hppa64.s

vacall-hppa64.s : $(srcdir)/vacall-hppa64-macro.S
	$(CPP) $(ASPFLAGS) -I$(srcdir)/../../common $(srcdir)/vacall-hppa64-macro.S | grep -v '^ *#line' | grep -v '^#' | sed -e "s,!,',g" > vacall-hppa64.s

vacall-arm.lo : vacall-arm.s
	$(LIBTOOL_COMPILE) $(CC) @GCC_X_NONE@ -c vacall-arm.s

vacall-arm.s : $(srcdir)/vacall-arm-macro.S
	$(CPP) $(ASPFLAGS) -I$(srcdir) -I$(srcdir)/../../common $(srcdir)/vacall-arm-macro.S | grep -v '^ *#line' | grep -v '^#' | sed -e 's,% ,%,g' -e 's,//,@,g' -e 's,\$$,#,g' > vacall-arm.s

vacall-armhf.lo : vacall-armhf.s
	$(LIBTOOL_COMPILE) $(CC) @GCC_X_NONE@ -c vacall-armhf.s

vacall-armhf.s : $(srcdir)/vacall-armhf-macro.S
	$(CPP) $(ASPFLAGS) -I$(srcdir) -I$(srcdir)/../../common $(srcdir)/vacall-armhf-macro.S | grep -v '^ *#line' | grep -v '^#' | sed -e 's,% ,%,g' -e 's,//,@,g' -e 's,\$$,#,g' > vacall-armhf.s

vacall-arm64.lo : vacall-arm64.s
	$(LIBTOOL_COMPILE) $(CC) @GCC_X_NONE@ -c vacall-arm64.s

vacall-arm64.s : $(srcdir)/vacall-arm64-macro.S
	$(CPP) $(ASPFLAGS) -I$(srcdir) -I$(srcdir)/../../common $(srcdir)/vacall-arm64-macro.S | grep -v '^ *#line' | grep -v '^#' | sed -e 's,% ,%,g' -e 's,//,@,g' -e 's,\$$,#,g' > vacall-arm64.s

vacall-powerpc.lo : vacall-powerpc.s
	$(LIBTOOL_COMPILE) $(CC) @GCC_X_NONE@ -c vacall-powerpc.s

vacall-powerpc.s : $(srcdir)/vacall-powerpc-aix.s $(srcdir)/vacall-powerpc-linux-macro.S $(srcdir)/vacall-powerpc-macos.s $(srcdir)/vacall-powerpc-sysv4-macro.S
	case "$(OS)" in \
	  aix*) syntax=aix;; \
	  linux* | netbsd* | openbsd*) syntax=linux;; \
	  macos* | darwin*) syntax=macos;; \
	  *) syntax=sysv4;; \
	esac; \
	case $${syntax} in \
	  linux | netbsd | sysv4) \
	    $(CPP) $(ASPFLAGS) -I$(srcdir) $(srcdir)/vacall-powerpc-$${syntax}-macro.S | grep -v '^ *#line' | grep -v '^#' | sed -e 's,% ,%,g' -e 's,//,@,g' -e 's,\$$,#,g' > vacall-powerpc.s || exit 1 ;; \
	  macos) \
	    grep -v '\.machine' $(srcdir)/vacall-powerpc-$${syntax}.s > vacall-powerpc.s || exit 1 ;; \
	  *) \
	    cp $(srcdir)/vacall-powerpc-$${syntax}.s vacall-powerpc.s || exit 1 ;; \
	esac

vacall-powerpc64.lo : vacall-powerpc64.s
	$(LIBTOOL_COMPILE) $(CC) @GCC_X_NONE@ -c vacall-powerpc64.s

vacall-powerpc64.s : $(srcdir)/vacall-powerpc64-aix.s $(srcdir)/vacall-powerpc64-linux.S
	case "$(OS)" in \
	  aix*) syntax=aix;; \
	  *) syntax=linux;; \
	esac; \
	case $${syntax} in \
	  linux) \
	    $(CPP) $(ASPFLAGS) $(srcdir)/vacall-powerpc64-$${syntax}.S | grep -v '^ *#line' | grep -v '^#' | sed -e 's,% ,%,g' -e 's,//.*$$,,' > vacall-powerpc64.s || exit 1 ;; \
	  *) \
	    cp $(srcdir)/vacall-powerpc64-$${syntax}.s vacall-powerpc64.s || exit 1 ;; \
	esac

vacall-powerpc64-elfv2.lo : vacall-powerpc64-elfv2.s
	$(LIBTOOL_COMPILE) $(CC) @GCC_X_NONE@ -c vacall-powerpc64-elfv2.s

vacall-powerpc64-elfv2.s : $(srcdir)/vacall-powerpc64-elfv2-linux.S
	$(CPP) $(ASPFLAGS) $(srcdir)/vacall-powerpc64-elfv2-linux.S | grep -v '^ *#line' | grep -v '^#' | sed -e 's,% ,%,g' -e 's,//.*$$,,' > vacall-powerpc64-elfv2.s

vacall-ia64.lo : vacall-ia64.s
	$(LIBTOOL_COMPILE) $(CC) @GCC_X_NONE@ -c vacall-ia64.s

vacall-ia64.s : $(srcdir)/vacall-ia64-macro.S
	$(CPP) $(ASPFLAGS) $(srcdir)/vacall-ia64-macro.S | grep -v '^ *#line' | grep -v '^#' | sed -e 's,% ,%,g' -e 's,//.*$$,,' > vacall-ia64.s

@IFNOT_MSVC@vacall-x86_64.lo : vacall-x86_64.s
@IFNOT_MSVC@	$(LIBTOOL_COMPILE) $(CC) @GCC_X_NONE@ -c vacall-x86_64.s

@IFNOT_MSVC@vacall-x86_64.s : $(srcdir)/vacall-x86_64-macro.S $(srcdir)/vacall-x86_64-windows-macro.S
@IFNOT_MSVC@	case "$(OS)" in \
@IFNOT_MSVC@	  cygwin* | mingw*) variant='-windows';; \
@IFNOT_MSVC@	  *) variant='';; \
@IFNOT_MSVC@	esac; \
@IFNOT_MSVC@	$(CPP) $(ASPFLAGS) -I$(srcdir) -I$(srcdir)/../../common - < $(srcdir)/vacall-x86_64$${variant}-macro.S | grep -v '^ *#line' | grep -v '^#' | sed -e 's,% ,%,g' -e 's,\. ,.,g' -e 's,@ ,@,g' -e 's,//.*$$,,' -e 's/##//g' > vacall-x86_64.s

@IF_MSVC@vacall-x86_64.lo : vacall-x86_64.asm
@IF_MSVC@	$(LIBTOOL_COMPILE) ml64 -c -nologo vacall-x86_64.asm
@IF_MSVC@	mkdir -p .libs; cp vacall-x86_64.@OBJEXT@ .libs/vacall-x86_64.@OBJEXT@

@IF_MSVC@vacall-x86_64.asm : $(srcdir)/vacall-x86_64-windows-macro.S
@IF_MSVC@	{ $(CPP) $(ASPFLAGS) -I$(srcdir)/../../common $(srcdir)/vacall-x86_64-windows-macro.S | grep -v '^#'; echo 'END'; } > vacall-x86_64.asm

vacall-x86_64-x32.lo : vacall-x86_64-x32.s
	$(LIBTOOL_COMPILE) $(CC) @GCC_X_NONE@ -c vacall-x86_64-x32.s

vacall-x86_64-x32.s : $(srcdir)/vacall-x86_64-x32-linux.s
	cp $(srcdir)/vacall-x86_64-x32-linux.s vacall-x86_64-x32.s

vacall-s390.lo : vacall-s390.s
	$(LIBTOOL_COMPILE) $(CC) @GCC_X_NONE@ -c vacall-s390.s

vacall-s390.s : $(srcdir)/vacall-s390-macro.S
	$(CPP) $(ASPFLAGS) -I$(srcdir) $(srcdir)/vacall-s390-macro.S | grep -v '^ *#line' | grep -v '^#' | sed -e 's,% ,%,g' -e 's,//.*$$,,' > vacall-s390.s

vacall-s390x.lo : vacall-s390x.s
	$(LIBTOOL_COMPILE) $(CC) @GCC_X_NONE@ -c vacall-s390x.s

vacall-s390x.s : $(srcdir)/vacall-s390x-macro.S
	$(CPP) $(ASPFLAGS) -I$(srcdir) $(srcdir)/vacall-s390x-macro.S | grep -v '^ *#line' | grep -v '^#' | sed -e 's,% ,%,g' -e 's,//.*$$,,' > vacall-s390x.s

vacall-libapi.lo : $(srcdir)/vacall-libapi.c $(srcdir)/../../vacall/vacall-internal.h $(srcdir)/vacall_r.h ../../config.h
	$(LIBTOOL_COMPILE) $(CC) $(INCLUDES_WITH_GNULIB) $(CPPFLAGS) $(CFLAGS) -DREENTRANT -c $(srcdir)/vacall-libapi.c

vacall-structcpy.lo : $(srcdir)/vacall-structcpy.c $(srcdir)/../../common/structcpy.c
	$(LIBTOOL_COMPILE) $(CC) -I$(srcdir)/../../common $(CPPFLAGS) $(CFLAGS) -c $(srcdir)/vacall-structcpy.c

libvacall.la : $(OBJECTS)
	$(LIBTOOL_LINK) $(CC) -o libvacall.la -rpath $(libdir) -no-undefined $(OBJECTS) $(LDFLAGS)

# Installs the library and include files only. Typically called with only
# $(libdir) and $(includedir) - don't use $(prefix) and $(exec_prefix) here.
install-lib : all force
	mkdir -p $(includedir)
	$(INSTALL_DATA) $(srcdir)/vacall_r.h $(includedir)/vacall_r.h

install : all force
	mkdir -p $(DESTDIR)$(prefix)
#	mkdir -p $(DESTDIR)$(exec_prefix)
#	mkdir -p $(DESTDIR)$(libdir)
#	$(LIBTOOL_INSTALL) $(INSTALL_DATA) libvacall.la $(DESTDIR)$(libdir)/libvacall.la
	mkdir -p $(DESTDIR)$(includedir)
	$(INSTALL_DATA) $(srcdir)/vacall_r.h $(DESTDIR)$(includedir)/vacall_r.h
#	mkdir -p $(DESTDIR)$(mandir)
#	mkdir -p $(DESTDIR)$(mandir)/man3
#	$(INSTALL_DATA) $(srcdir)/vacall_r.3 $(DESTDIR)$(mandir)/man3/vacall_r.3
#	mkdir -p $(DESTDIR)$(datadir)
#	mkdir -p $(DESTDIR)$(htmldir)
#	$(INSTALL_DATA) $(srcdir)/vacall_r.html $(DESTDIR)$(htmldir)/vacall_r.html

installdirs : force
	mkdir -p $(DESTDIR)$(prefix)
#	mkdir -p $(DESTDIR)$(exec_prefix)
#	mkdir -p $(DESTDIR)$(libdir)
	mkdir -p $(DESTDIR)$(includedir)
#	mkdir -p $(DESTDIR)$(mandir)
#	mkdir -p $(DESTDIR)$(mandir)/man3
#	mkdir -p $(DESTDIR)$(datadir)
#	mkdir -p $(DESTDIR)$(htmldir)

uninstall : force
#	$(LIBTOOL_UNINSTALL) $(RM) $(DESTDIR)$(libdir)/libvacall.la
	$(RM) $(DESTDIR)$(includedir)/vacall_r.h
#	$(RM) $(DESTDIR)$(mandir)/man3/vacall_r.3
#	$(RM) $(DESTDIR)$(htmldir)/vacall_r.html

check : all

extracheck : all

mostlyclean : clean

clean : force
	$(RM) *.@OBJEXT@ *.lo *.a libvacall.* core
	$(RM) vacall-i386.s vacall-sparc.s vacall-sparc64.s vacall-m68k.s vacall-mips.s vacall-mipsn32.s vacall-mips64.s vacall-alpha.s vacall-hppa.s vacall-hppa64.s vacall-arm.s vacall-armhf.s vacall-arm64.s vacall-powerpc.s vacall-powerpc64.s vacall-powerpc64-elfv2.s vacall-ia64.s vacall-x86_64.s vacall-x86_64.asm vacall-x86_64-x32.s vacall-s390.s vacall-s390x.s
	$(RM) -r .libs _libs

distclean : clean
	$(RM) Makefile

maintainer-clean : distclean


# List of source files (committed in version control or generated by Makefile.devel).
SOURCE_FILES = \
  COPYING \
  README \
  Makefile.devel \
  Makefile.maint \
  Makefile.in \
  vacall_r.h \
  get_receiver.c \
  vacall-alpha-linux.s vacall-alpha-macro.S \
  vacall-arm-macro.S \
  vacall-armhf-macro.S \
  vacall-arm64-macro.S \
  vacall-hppa-linux.s vacall-hppa-macro.S \
  vacall-hppa64-linux.s vacall-hppa64-macro.S \
  vacall-i386-linux.s vacall-i386-macro.S \
  vacall-ia64-linux.s vacall-ia64-macro.S \
  vacall-m68k-linux.s vacall-m68k-sun.s vacall-m68k.mit.S vacall-m68k.motorola.S \
  vacall-mipseb-linux.s vacall-mipsel-linux.s vacall-mipseb-macro.S vacall-mipsel-macro.S \
  vacall-mipsn32eb-linux.s vacall-mipsn32el-linux.s vacall-mipsn32eb-macro.S vacall-mipsn32el-macro.S \
  vacall-mips64eb-linux.s vacall-mips64el-linux.s vacall-mips64eb-macro.S vacall-mips64el-macro.S \
  vacall-powerpc-aix.s \
  vacall-powerpc-linux.s vacall-powerpc-linux-macro.S \
  vacall-powerpc-macos.s \
  vacall-powerpc-sysv4-macro.S \
  vacall-powerpc64-aix.s vacall-powerpc64-linux.S vacall-powerpc64-elfv2-linux.S \
  vacall-s390-linux.s vacall-s390-macro.S \
  vacall-s390x-linux.s vacall-s390x-macro.S \
  vacall-sparc-linux.s vacall-sparc-macro.S \
  vacall-sparc64-linux.s vacall-sparc64-macro.S \
  vacall-x86_64-linux.s vacall-x86_64-macro.S vacall-x86_64-x32-linux.s \
  vacall-x86_64-windows.s vacall-x86_64-windows-macro.S \
  vacall-libapi.c \
  vacall-structcpy.c
# List of distributed files generated by Makefile.maint.
GENERATED_FILES = \
  vacall-i386-msvc.c
# List of distributed files.
DISTFILES = $(SOURCE_FILES) $(GENERATED_FILES)

distdir : $(DISTFILES)
	for file in $(DISTFILES); do \
	  if test -f $$file; then dir='.'; else dir='$(srcdir)'; fi; \
	  cp -p "$$dir/$$file" '$(distdir)'/$$file || exit 1; \
	done


force :
